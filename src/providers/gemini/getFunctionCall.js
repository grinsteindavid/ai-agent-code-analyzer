const { GoogleGenerativeAI } = require("@google/generative-ai");
const { getMessages, addMessage } = require("../../utils/context");
const { getFunctionCallPrompt } = require("../system-prompts");

// Initialize Gemini API
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * Call Gemini API and get function call response
 * @param {Object} options - Options object
 * @param {Array} [options.functions=[]] - Array of function definitions
 * @param {String} [options.nextThought] - The Next action generated by getNextThought
 * @returns {Object|null} - Function call with name and arguments, or null if error
 */
async function getFunctionCall(options) {
  // Default options
  const {
    functions = [],
    nextThought = "",
  } = options;

  if(nextThought.toLowerCase().includes("@stop execution@")) {
    return null;
  }
  
  try {
    // Convert OpenAI tool format to Gemini function format if needed
    const geminiFunctions = functions.map(tool => {
      // Create a deep copy of parameters and remove unsupported fields
      const parameters = JSON.parse(JSON.stringify(tool.function.parameters));
      
      // Helper function to clean schema objects recursively
      const cleanSchema = (schema) => {
        if (!schema || typeof schema !== 'object') return;
        
        // Remove fields at current level
        if (schema.additionalProperties !== undefined) delete schema.additionalProperties;
        if (schema.default !== undefined) delete schema.default;
        
        // Process properties if they exist
        if (schema.properties) {
          Object.keys(schema.properties).forEach(propKey => {
            // Remove fields from each property
            const prop = schema.properties[propKey];
            if (prop.additionalProperties !== undefined) delete prop.additionalProperties;
            if (prop.default !== undefined) delete prop.default;
            
            // Recursively clean nested objects
            cleanSchema(prop);
          });
        }
        
        // Handle items in arrays
        if (schema.items) {
          cleanSchema(schema.items);
        }
      };
      
      // Clean the entire schema
      cleanSchema(parameters);

      return {
        name: tool.function.name,
        description: tool.function.description,
        parameters: parameters
      };
    });

    // Prepare system instruction
    const systemInstruction = getFunctionCallPrompt();

    // Create the model with system instruction
    const model = genAI.getGenerativeModel({ 
      model: "gemini-1.5-flash",
      systemInstruction: systemInstruction,
      tools: [{functionDeclarations: geminiFunctions}]
    });

    // Format conversation history for Gemini
    const chatHistory = getMessages().map(msg => ({
      role: msg.role === 'assistant' ? 'model' : msg.role,
      parts: [{ text: msg.content }]
    }));
    
    // Prepare the content for generation
    const contents = [
      ...chatHistory,
      { role: 'user', parts: [{ text: `Next action: ${nextThought}` }] }
    ];
    
    // Generate content with the new API pattern
    const result = await model.generateContent({
      contents,
      generationConfig: {
        temperature: 0.1,
        maxOutputTokens: 1024,
      }
    });
    
    // Get function calls directly from the response object
    const functionCalls = result.response.functionCalls();
    
    // Check if we have function calls and return the first one
    if (functionCalls && functionCalls.length > 0) {
      const functionCall = functionCalls[0];
      return {
        name: functionCall.name,
        arguments: functionCall.args
      };
    }
    
    return null;
  } catch (error) {
    addMessage(`user`, `ERROR: ${error.message}`);
    return null;
  }
}

module.exports = getFunctionCall;
